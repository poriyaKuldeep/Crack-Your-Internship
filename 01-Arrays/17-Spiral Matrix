class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        // vector<int>ans;
        // int row=matrix.size();
        // int col=matrix[0].size();
        // int count =0;
        // int total=row*col;
        // int startrow=0;
        // int endrow=row-1;
        // int startcol=0;
        // int endcol=col-1;
        // while(count <total){
        //     for(int index=startcol;count<total && index<=endcol;index++){
        //         ans.push_back(matrix[startrow][index]);
        //         count++;
        //     }
        //     startrow++;
        //     for(int index=startrow;count<total && index<=endrow;index++){
        //         ans.push_back(matrix[index][endcol]);
        //         count++;
        //     }
        //     endcol--;
        //     for(int index=endcol;count<total && index>=startcol;index--){
        //         ans.push_back(matrix[endrow][index]);
        //         count++;
        //     }
        //     endrow--;
        //     for(int index=endrow;count<total && index>=startrow;index--){
        //         ans.push_back(matrix[index][startcol]);
        //         count++;
        //     }
        //     startcol++;
        // }
        
        // return ans;
        int n=matrix.size();
        int m=matrix[0].size();
        int top=0;
        int bottom=n-1;
        int left=0;
        int right=m-1;
        vector<int> ans;

while(left <=right && top<=bottom){

        for(int i=left;i<=right;i++){
            ans.push_back(matrix[top][i]);
        }
        top++;

        for(int i=top;i<=bottom;i++){
            ans.push_back(matrix[i][right]);
        }
        right--;


        if(top <=bottom){

        for(int i=right;i>=left;i--){
            ans.push_back(matrix[bottom][i]);
        }
        bottom--;
        }

        if(left <=right){

        for(int i=bottom;i>=top;i--){
            ans.push_back(matrix[i][left]);
        }
        left++;
        }

}
return ans;
    }
};